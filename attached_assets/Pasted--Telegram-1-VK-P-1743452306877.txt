Техническое задание: Парсер постов ВКонтакте для Telegram
1. Общее описание проекта
Название: VK Post Parser Bot
Тип: Telegram бот для парсинга активностей постов ВКонтакте
Технологии: Python, aiogram 3.0+, SQLite, aiosqlite, requests, BeautifulSoup4, pdfplumber
2. Текущие функциональные возможности
2.1. Возможности для пользователя
Отправка файлов (HTML, PDF, TXT) со ссылками на посты ВК для парсинга
Выбор времени парсинга:
Стандартный (23:50 от момента публикации)
За 2 минуты после публикации
За 5 минут до истечения 24 часов
За 30 минут до истечения 24 часов
За 1 час до истечения 24 часов
Просмотр архива загруженных файлов
Просмотр результатов парсинга
Выбор формата вывода результатов (TXT)
Удаление файлов из архива (одиночное/массовое)
Отмена запланированного парсинга
2.2. Возможности парсинга
Парсинг лайков (пользователи, которые лайкнули пост)
Парсинг комментариев (пользователи, которые комментировали)
Парсинг репостов (пользователи, которые сделали репост)
Автоматическое определение времени публикации из загруженных файлов
Поддержка постов из Маркет-платформы и VK AdBlogger
Сохранение результатов в формате TXT
2.3. Технические возможности
Кеширование запросов к API ВКонтакте
Система управления ошибками и логирование
Хранение данных в SQLite базе
Планировщик заданий для автоматического парсинга
Восстановление работы после сбоев
Сервисный файл для systemd (для запуска на сервере)
Скрипты для запуска/остановки бота
3. Архитектура проекта
3.1. Файловая структура
3.2. Структура базы данных
Из анализа кода ясно, что база данных содержит таблицы:
settings - настройки бота (vk_token, parse_time, result_format и т.д.)
posts - информация о запланированных постах для парсинга
file_archive - архив загруженных файлов и статусы их обработки
3.3. Основные компоненты
Интерфейс пользователя (Telegram) - меню, кнопки, обработка команд
Система обработки файлов - извлечение ссылок из HTML, PDF, TXT
Система парсинга постов ВК - работа с API ВКонтакте
Планировщик заданий - автоматический запуск парсинга в нужное время
Система хранения данных - работа с базой данных SQLite
4. Обнаруженные проблемы и рекомендации по улучшению
4.1. Критические проблемы
Токен Telegram в исходном коде: В коде жестко прописан токен Telegram API (строка 173), что является нарушением безопасности. Рекомендуется переместить его в .env файл или в базу данных.
Монолитная структура кода: Весь код (5226 строк) находится в одном файле, что затрудняет поддержку и развитие. Рекомендуется разделить код на модули.
Дублирование функций: В коде обнаружены дублированные функции (например, calculate_parse_time, calculate_standard_parse_time, parse_scheduled_file). Требуется рефакторинг.
Отсутствие обработки ошибок в скриптах: Скрипты запуска и остановки бота не содержат достаточно проверок на ошибки.
4.2. Важные улучшения
Разделение кода на модули:
models.py - работа с базой данных
vk_api.py - взаимодействие с API ВКонтакте
file_handlers.py - обработка загруженных файлов
schedulers.py - планирование и выполнение заданий
bot.py - основная логика бота
Улучшение безопасности:
Добавить .env файл для хранения API ключей
Убрать токены из исходного кода
Добавить проверку прав доступа к файлам и каталогам
Расширение функционала:
Добавить поддержку других форматов вывода (CSV, EXCEL)
Добавить статистику и аналитику по результатам парсинга
Добавить проверку корректности ссылок на посты ВК
Оптимизация производительности:
Оптимизировать кеширование запросов к API ВК
Использовать асинхронные запросы для большей скорости
Добавить пагинацию для больших результатов
Улучшение UX/UI:
Добавить индикацию прогресса при парсинге
Улучшить форматирование результатов
Добавить возможность поиска в архиве
4.3. Технический долг
Отсутствие тестов: Добавить автоматические тесты для критически важных компонентов
Неоптимальная структура базы данных: Улучшить схему и индексы
Отсутствие документации API: Добавить документацию для разработчиков
Жесткое кодирование параметров: Вынести конфигурационные параметры из кода
5. Дорожная карта развития
5.1. Первый этап (устранение критических проблем)
Реструктуризация кода в модули
Удаление API ключей из исходного кода
Устранение дублирования функций
Документирование основных функций
5.2. Второй этап (улучшение функционала)
Добавление экспорта в разные форматы (CSV, EXCEL)
Расширение аналитики по результатам
Улучшение UI и навигации
Добавление роли администратора
5.3. Третий этап (оптимизация и масштабирование)
Оптимизация производительности
Добавление системы кеширования Redis
Подготовка к увеличению нагрузки
Добавление Docker-контейнеризации
6. Заключение
Текущая реализация бота для парсинга постов ВКонтакте функциональна, но требует серьезной реструктуризации для улучшения поддерживаемости, безопасности и масштабируемости. Основные приоритеты: разделение монолитного кода на модули, повышение безопасности, улучшение обработки ошибок и расширение функционала.